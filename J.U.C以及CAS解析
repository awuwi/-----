一、Java并发包 java.util.concurrent 

★ 1、ConcurrentHashMap
ConcurrentHashMap 和 java.util.HashTable 类很相似，但 ConcurrentHashMap 能够提供比 HashTable 更好的并发性能。
在你从中读取对象的时候 ConcurrentHashMap 并不会把整个 Map 锁住。
此外，在你向其中写入对象的时候，ConcurrentHashMap 也不会锁住整个 Map。它的内部只是把 Map 中正在被写入的部分进行锁定。
另外一个不同点是，在被遍历的时候，即使是 ConcurrentHashMap 被改动，它也不会抛 ConcurrentModificationException。尽管 Iterator 的设计不是为多个线程的同时使用。

★ 2、信号量 Semaphore

2.1、 java.util.concurrent.Semaphore 类是一个计数信号量。这就意味着它具备两个主要方法：
     ★ acquire()
     ★ release()
计数信号量由一个指定数量的 "许可" 初始化。每调用一次 acquire()，一个许可会被调用线程取走。每调用一次 release()，一个许可会被返还给信号量。
因此，在没有任何 release() 调用时，最多有 N 个线程能够通过 acquire() 方法，N 是该信号量初始化时的许可的指定数量。
这些许可只是一个简单的计数器。这里没啥奇特的地方。

2.2、 Semaphore 用法
信号量主要有两种用途：
A.保护一个重要(代码)部分防止一次超过 N 个线程进入。
B.在两个线程之间发送信号。

（1）保护重要部分
如果你将信号量用于保护一个重要部分，试图进入这一部分的代码通常会首先尝试获得一个许可，然后才能进入重要部分(代码块)，执行完之后，再把许可释放掉。
（2）在线程之间发送信号
如果你将一个信号量用于在两个线程之间传送信号，通常你应该用一个线程调用 acquire() 方法，而另一个线程调用 release() 方法。
如果没有可用的许可，acquire() 调用将会阻塞，直到一个许可被另一个线程释放出来。同理，如果无法往信号量释放更多许可时，一个 release() 调用也会阻塞。
通过这个可以对多个线程进行协调。比如，如果线程 1 将一个对象插入到了一个共享列表(list)之后之后调用了 acquire()，
而线程 2 则在从该列表中获取一个对象之前调用了 release()，这时你其实已经创建了一个阻塞队列。
信号量中可用的许可的数量也就等同于该阻塞队列能够持有的元素个数。

★ 3、ThreadFactory
顾名思义，ThreadFactory充当线程（不存在）池，它根据需要创建新线程。它消除了大量样板编码的需要，以实现有效的线程创建机制。

★ 4、BlockingQueue
在异步编程中，最常见的集成模式之一是生产者 - 消费者模式。
该java.util.concurrent包带有一个数据结构所知道的BlockingQueues▬▬▬它可以在这些异步情况下非常有用的。

★ 5、Lock
毫不奇怪，Lock是一个实用程序，用于阻止其他线程访问某段代码，除了当前正在执行它的线程。
Lock和Synchronized块之间的主要区别在于synchronized块完全包含在方法中; 但是，我们可以在单独的方法中使用Lock API的lock（）和unlock（）操作。

二、 CAS

1、 什么是CAS
CAS和乐观锁思想类似，也是不加锁，所以不会产生阻塞，是一种非阻塞算法。

2、 concurrent包的实现：
因为java的CAS同时具备 volatile 读和volatile写的内存语义，因而Java线程之间的通信现在有了下面四种方式：

1. A线程写volatile变量，随后B线程读这个volatile变量。

2. A线程写volatile变量，随后B线程使用CAS升级这个volatile变量。

3. A线程使用CAS升级一个volatile变量，随后B线程使用CAS升级这个volatile变量。

4. A线程使用CAS升级一个volatile变量，随后B线程读这个volatile变量。

3、 线程通信：
volatile变量的读/写和CAS能实现线程之间的通信。
把这些特性整合在一起，就形成了整个concurrent包得以实现的基石。
假如我们仔细分析concurrent包的源代码实现，会发现一个通使用化的实现模式：

1. 首先，公告共享变量为volatile；

2. 而后，用CAS的原子条件升级来实现线程之间的同步；

3. 同时，配合以volatile的读/写和CAS所具备的volatile读和写的内存语义来实现线程之间的通信。
